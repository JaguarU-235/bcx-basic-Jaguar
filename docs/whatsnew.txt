- Fixed a long standing bug in RPRINT: essentially basic_r_size and basic_r_indx were swapped. Many thanks to OMF for the fix!
- Fixed a small bug when importing generic assets ("_end" label was not exported).
- Introduced an alternative to rsetobj/rgetobj: users can now do rlist[object].index=value instead of rsetobj and myval=rlist[object].index which is faster in execution too.
  Updated nyandodge to demonstrate the new feature.
- Project chessboard added.
- New function: rbsort(table,no_of_indices) will sort an array of longwords from smallest to largest. Only longwords (4 byte integers) for now.
- BUILD.bat now outputs build.log to console in case of error instead of opening notepad. Also fixed a bug in BUILD.bat that would continue the build process in abs mode if linking failed.
- Added a quick reference guide (incomplete).
- Fixed the stock fonts in all projects
- Assets can now be packed. Suffix field C with "_pack" in assets.txt
- New command powaunpack(source_address,destination_address) will unpack data from source_address to destination_address. Note that it's your responsibility to reserve enough RAM for unpacking. Also, no checking to see if a packed asset exists at the source address - again it's your responsibility!
- Small fix for buildlink with monochrome bmps less than 32 pixels wide.
- Bug fix for Zerosquare player rotary/mouse mode. Also, the correct way to initialise rotary/mouse mode and read inputs is:
  call Input_SetRotaryMode    'or Input_SetAtariMouseMode or Input_SetAmigaMouseMode
  call Input_SetJoyPort1           'or Input_SetJoyPort2, depending on which port the spinny device is plugged in.
  "call" is mandatory.
- Updated website files with new tutorials
- Put a hard size limit when building .abs files.
- Mention of sfx_mlaw in prototype assets.txt.
- New project raycaster.
- Moved some files from BIN to bin 
- U-235 is now again the default sound player in template.
- New commands:
  powabset(spr_index, offset, no_of_times, array_of_values, skip_offset)
  powabdiff(spr_index, offset, no_of_times, array_of_values, skip_offset)
  powabzap(spr_index, offset, no_of_times, value, skip_offset)
  Exactly the same as powaset, powadiff, powazap but you can control the offset to skip to the next object (it's hardcoded to 188 for the other three)
- New command powazap(spr_index, offset, no_of_times, value) will write value no_of_times times in offset offset, starting with index spr_index.
- New project maprunner generates a random maze and lets you scroll through it.
- New RAPTOR.O fixes a small bug with object wrapping.
- BUILD.bat ascii logo. Fix for nppexec macros (thanks to OMF!).
- powadiff(spr_index, offset, no_of_times, array_of_values)
- powaset(spr_index, offset, no_of_times, array_of_values) 
- Fixed rapapp.s files that should have changed for v1.2

v1.2 - 23 Aug 2015 - (please read carefully as it might break current projects)
- Small fix for peek/dpeek/lpeek
- Small fix for BUILD.bat
- Added our own version of jcp.exe
- Added Zerosquare's version of bjl uploader
- Small fix in build.bat that would create a folder for a non existing project
- Small fix in build.bat when building .abs files
- New option for build.bat: build <project> sendy bjl will upload built binary using bjl transfer (note: you might need to edit the upload settings)
- New file externs.inc added instead of having to .extern all new needed exposed functions. All existing rapapp.s files need some modifying!
- New function: bin2asc(number, digits, string$) will convert number with (digits+1) digits very fast and render it to string$. Note that the number has to be an integer. Quick example: bin2asc(987,2,out$) will convert number 987 to string using 3 digits and place it into out$. If we used 3 instead of 2 we'd get "0987"
- Added a new audio player by Zerosquare/CSVD. This change CAN break your builds if you don't add a few changes to your rapapp.s - see what's changed to include\template\rapapp.s for more info). You can still use the u-235 sound engine instead of this, but you have to change the first equate at the top of your rapapp.s (again, look at the template for more info).
- New command added: ZEROPAD() will read both pad ports and sends results back to variables zero_left_pad, zero_right_pad, zero_mousex_delta, zero_mousey_delta and zero_rotary_delta. By default the engine is configured to assume 2 joypads connected.
- New command added: Input_SetNormalPadMode will set up the engine to read two pads (enabled by default). zero_left_pad and zero_right_pad can be read using these constants: Input_Pad_Pause, Input_Pad_A, Input_Pad_Up, Input_Pad_Down, Input_Pad_Left, Input_Pad_Right,Input_Pad_C1,Input_Pad_B,Input_Pad_Star,Input_Pad_7,Input_Pad_4,Input_Pad_1,Input_Pad_C2,Input_Pad_C,Input_Pad_0,Input_Pad_8,Input_Pad_5, Input_Pad_2, Input_Pad_C3, Input_Pad_Option, Input_Pad_Sharp, Input_Pad_9, Input_Pad_6,Input_Pad_3. (example: if zero_left_pad band Input_Pad_Star will check left pad for star button press).
- New command added: Input_SetJoyPort1 selects the joypad port 1 to use for rotary/mouse input. This doesn't enable rotary/mouse mode if it isn't already. zero_rotary_delta will give the number of rotary ticks since the last read command.
- New command added: Input_SetJoyPort2 selects the joypad port 2 to use for rotary/mouse input. This doesn't enable rotary/mouse mode if it isn't already.
- New command added: Input_SetRotaryMode selects the rotary mode.
- New command added: Input_SetAtariMouseMode selects the Atari mouse mode. Input_Mouse_Left and Input_Mouse_Right are the masks to check for button presses and zero_mousex_delta, zero_mousey_delta the number of mouse ticks in x and y axis since the last read command.
- New command added: Input_SetAmigaMouseMode selects the Amiga mouse mode.
- New command added: SNDZEROPLAY chan, start_address, len, frequency, params will play a sample starting from start_address with length len to channel chan with speed frequency and with flags params. Channel should be from 1 to 4. start_address should be aligned to 4 bytes. len should be a multiple of 4. frequency should be an integer that divides the base frequency of 46168Hz. So for example if it's set to 1, it'll play a sample at 46168Hz, a 2 will play a sample at 23084Hz etc. Available flags are Zero_Audio_8bit_Signed (plays an 8-bit signed sample), Zero_Audio_8bit_Unsigned (plays an 8-bit unsigned sample), Zero_Audio_8bit_muLaw (plays a 8-bit compressed μLaw sample) and Zero_Audio_Looping (enables sample loop).
- New assets.txt functionality: sfx_mlawFREQ will convert a sample to μlaw and reample it to frequency FREQ (example: sfx_mlaw15389 will convert a sample to 15389Hz and compress it to μLaw ready for the player)
- New assets.txt functionality: sfx_rawFREQ will convert a sample to raw and reample it to frequency FREQ (example: sfx_raw15389 will convert a sample to 15389Hz and compress it to μLaw ready for the player)
- New raptor.o that adds extra functionality:
- New variable exposed: raptor_ntsc_flag is non-zero if machine is ntsc.
- New variable exposed: raptor_user_savedata	points to 512 bytes for user data which will be appended to the MT save
- Slight improvement: you can now use binary bitfields in basic! Just use B8(binary byte) for bytes, B16(binary byte,binary byte) words and B32(binary byte,binary byte,binary byte,binary byte) for longwords!
- Added missing assets.txt from crytest.
- Project starfield added.
- Makelink: CRY conversion for 16 bit images added. assets.txt now accepts "gfx_cry"
- Added new project crytest that demonstrates this.
- Project LOLVALAMP added.

v1.1 - 25 Jul 2015
- Fixed buildlink problem when converting 16-bit images.
- New RAPTOR.O which exposes two new variables: raptor_used_particles and raptor_free_particles, which do pretty much what they say.
- New project "scroller" that has the code that goes with the tutorial of the same name.
- plot() fixed
- RAPTOR_particle_gfx
- Bug fix for TILEMAP
- Raptor variable exposed: raptor_mt_present is negative if no Memory Track is present
- Raptor variable exposed: raptor_highscores_hex points to the highscore table (10 entries, one longword each)
- Raptor variable exposed: raptor_highscores_nam points to the highscore names table (10 entries, 8 characters each, not null terminated)
- New RB+ function hiscore_check(score,name) checks if score is a high score. name, like above, is 8 characters.
- Raptor function exposed: RAPTOR_resort_score_table re-sorts the highscores as well as the names.
- Raptor function exposed: RAPTOR_mt_save saves the highscore table. Use it in combination with present.
- New project added: "scores" which demonstrates all the above

v1.0 - 13 Apr 2015 - initial installer release

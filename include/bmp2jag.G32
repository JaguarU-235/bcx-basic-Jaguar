'
' Convert a 8bpp bmp to jag format
' Code by promethea, with original 68k code by Sinister developments
'
' Foooooked in the arse by ggn in 27-02-2013 (WARNING - only 256c works proppa for now!)
' Mono mode added by ggn in 15-02-2015 for Kevvykevkevkevkev
'
' Needs to be launched with parameters from the command prompt:
' convbmp <input filename> <output filename> <colour bit depth> <width in bytes> <height in scanlines>
' It will output <filename>.jag
'

Mode StrSpace 0

Global Const __argmax = 50
Global __argc As Int
Global __argv() As String
Dim infile$, outpath$
Dim depth, width, height, l, i, x As Int
Dim sourceaddr, xBGR As Int

'
' Process command line params
'
ConvertCMDLine
infile$ = __argv(1)
outpath$ = __argv(2)

'OpenW 1
'Print infile$
'Print w, h
'Repeat
'Until InKey$ <> ""


If Not Exist(infile$)
  End
EndIf

'
' Read in source file
'
Open infile$ for Binary As # 1
l = LOF(# 1)
Dim sourcebmp(l) As Byte
sourceaddr = V:sourcebmp(0)
Dim aaa As Byte
For i = 1 To l
  BGet # 1, V:aaa, 1
  sourcebmp(i - 1) = aaa
  '  Debug.Print aaa,
Next i
Close # 1
'
' Figure out width and height
'
width = sourcebmp($15) * $100000 + sourcebmp($14) * $1000 + sourcebmp($13) * $100 + sourcebmp($12)
height = sourcebmp($19) * $100000 + sourcebmp($18) * $1000 + sourcebmp($17) * $100 + sourcebmp($16)
depth = sourcebmp($1d) * $100 + sourcebmp($1c)

'Print "done reading"

'Print infile$
'Print width, height
'Print "depth="; depth
'Repeat
'Until InKey$ <> ""



'Debug.Print width,height,depth
'
' Convert palette to jag format
'
If sourcebmp($1c) <> 4
  xBGR = 53
Else
  xBGR = $35
EndIf
Dim palette(255) As Word
Dim red, green, blue As Word
For i = 0 To 255
  blue = Rol&((Shr&(sourcebmp(xBGR + 1), 3)), 6)
  green = Shr&(sourcebmp(xBGR + 2), 2)
  red = Ror&(Shr&(sourcebmp(xBGR + 3), 3), 5)
  '  Debug.Print    Hex$(blue, 4)`Hex$(green, 4)`Hex$(red, 4)`Hex$(red Or green Or blue, 4)
  palette(i) = Ror&(red Or green Or blue, 8)            'Fuck you endianess!
  Add xBGR, 4
Next i

'Print "depth="; depth

'
' Do the conversion
'
Dim screenstart, destindex As Int
Dim col As Byte
Select depth
Case -1                         '***************** just dump the palette & exit
  Open outpath$ for Binary As # 1
  For i = 1 To 256
    BPut # 1, V:palette(i - 1), 2
  Next i
  Close # 1
  '  BSave outpath$, V:palette(0), 512

Case 1                          '***************** 1-bit
  Global hBmp As Long
  Dim y As Int, x As Int
  Dim a$ = infile$
  Dim b$
  hBmp = LoadImage(0, a$, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE)
  Dim z As Picture
  Set z = LoadPicture(a$)
  Dim w As Int = Round(z.Width / 26.46)
  Dim h As Int = Round(z.Height / 26.46)
  Dim yy As Int = h


  Open Left$(a$, RInStr(a$, ".") - 1) + ".jag" for Output As # 1


  OpenW 1, 0, 0, 500, 300, 0

  While yy > 0
    Put 0, yy - h, hBmp


    Get 0, 0, (w - 1), Min(199, yy - 1), b$


    'Repeat


    Dim picadr% = V:b$ + 24


    '
    ' Dump mono bitmap
    '
    Dim outb As Byte, pixel As Byte
    Dim outadr% = V:outb

    For y = 0 To Min(199, yy - 1)
      pixel = 128
      outb = 0
      For x = 0 To w - 1
        '    Plot x, y, Peek(picadr% + i + 0) * 65536 + Peek(picadr% + i + 1) * 256 + Peek(picadr% + i + 2)
        If LPeek(picadr%) <> 0
          outb = outb | pixel
        EndIf
        pixel = pixel >> 1
        If pixel = 0
          BPut # 1, outadr%, 1
          outb = 0
          pixel = 128
        EndIf
        Add picadr%, 4
      Next x
      If  ((w / 8) And 7 <> 0)
        outb = 0
        For i = 0 To 7 -  ((w / 8) And 7)
          BPut # 1, V:outadr%, 1
        Next i
      EndIf

    Next y


    yy = yy - 200
  Wend

  CloseW 1

  Close # 1




Case 8                          '***************** 8-bit
  screenstart = 1024 + 54
  Dim outbuffer(width * height) As Byte
  destindex = width * (height - 1)
  For i = 1 To height
    For x = 0 To width - 1
      outbuffer(destindex + x) = sourcebmp(screenstart)
      Inc screenstart
    Next x
    Sub destindex, width
  Next i
  If outpath$ = ""
    BSave Left$(infile$, Len(infile$) - 4) + ".pal", V:palette(0), 512
    Open Left$(infile$, Len(infile$) - 4) + ".jag" for Binary As # 1
  Else
    infile$ = Right$(infile$, Len(infile$) - RInStr(infile$, "\"))
    infile$ = Left$(infile$, Len(infile$) - 4)
    outpath$ = Left$(outpath$, RInStr(outpath$, "\"))
    BSave outpath$ + infile$ + ".pal", V:palette(0), 512
    Open outpath$ + infile$ + ".jag" for Binary As # 1
  EndIf
  For i = 1 To width * height
    BPut # 1, V:outbuffer(i - 1), 1
  Next i
  Close # 1
Case 16                          '***************** 16-bit raw
  screenstart = 1024 + 54
  Dim outbuffer(width * height * 2) As Word
  destindex = width * (height - 1)
  For i = 1 To height
    For x = 0 To width - 1
      col = sourcebmp(screenstart)
      outbuffer(destindex + x) = palette(col)
      Inc screenstart
    Next x
    Sub destindex, width
  Next i
  Open Left$(infile$, Len(infile$), 4) + ".jag" for Binary As # 1
  '  OpenW 1
  '  Print width, height, width * height * 2
  '  Repeat
  'Until InKey$ <> ""
  For i = 1 To width * height
    BPut # 1, V:outbuffer(i - 1), 2
  Next i
  x = 0                         'for aligment purposes, dump 64 zeros at the end
  For i = 1 To 64
    BPut # 1, V:x, 1
  Next i
  Close # 1
Case 4                          '***************** 4-bit
  width = width / 2
  screenstart = 54 + 64
  Dim outbuffer(width * height) As Byte
  destindex = width * (height - 1)
  For i = 1 To height
    For x = 0 To width - 1
      outbuffer(destindex + x) = sourcebmp(screenstart)
      Inc screenstart
    Next x
    Sub destindex, width
  Next i
  Open outpath$ + ".gfxdata" for Binary As # 5
  For i = 1 To width * height
    BPut # 5, V:outbuffer(i - 1), 1
  Next i
  Close # 5
  Open outpath$ + ".clut" for Binary As # 5
  For i = 1 To 16
    BPut # 5, V:palette(i - 1), 2
  Next i
  Close # 5
'##E#
EndSelect

>Procedure ConvertCMDLine()
  // The global variable __argc holds the
  // number of commandline arguments after executing ConvertCMDLine().
  // Arguments are separated by space(s)

  // __argv() is an Array with the splitted arguments.
  // Only __argmax arguments are returned.

  // __argv(0) holds the complete path, filename included.

  Local i As Int = 0, j As Int = 0
  Local cmd$

  Local LargeArg As Boolean = False
  Local a$

  ReDim __argv(__argmax)
  __argv(0) = App.FileName

  // Remove quotes
  If Left$(__argv(0), 1) = #34
    __argv(0) = Mid(__argv(0), 2)
  EndIf
  If Right$(__argv(0), 1) = #34
    __argv(0) = Left(__argv(0), Len(__argv(0)) - 1)
  EndIf

  cmd$ = Trim(_DosCmd$) + #32
  If Left$(cmd$, 1) <> """"
    i = InStr(cmd$, #32)
  Else
    'Debug.Print InStr(cmd$, """", 2)
    i = InStr(cmd$, #34, 2) : LargeArg = True

    cmd$ = Mid$(cmd$, 2) // remove space at start
  EndIf

  While i > 0
    j++
    If LargeArg
      // remove space at end
      a$ = Left$(cmd$, i - 2)
      If Len(a)
        __argv(j) = Left$(cmd$, i - 2)
      Else
        j--
      EndIf
      LargeArg = False
    Else
      // only remove space at end
      a$ = Left$(cmd$, i - 1)
      If Len(a)
        __argv(j) = Left$(cmd$, i - 1)
      Else
        j--
      EndIf
    EndIf

    Exit If (i + 1) > Len(cmd$)

    cmd$ = Mid$(cmd$, i + 1)

    If Left$(cmd$, 1) <> """"
      i = InStr(cmd$, #32)
    Else
      i = InStr(cmd$, #34, 2) : LargeArg = True
      cmd$ = Mid$(cmd$, 2) // remove space at beginning
    EndIf
  Wend

  // Return number of arguments
  __argc = j

EndProcedure
$DatFile
$FormVersion = 2
$ExeName = ..\BIN\bmp2jag.Exe
$FileDescription = Description
$Comments = Author: Not registered   
$CompanyName = Not registered   
$LegalCopyright = © 2015 Not registered   
$LanguageId = 0409
$FileVersion = %d.%d.%d.%d
$ProductVersion = %d.%d.%d.%d
$DatFile
